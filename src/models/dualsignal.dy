
%{
#include "dyna.h"
#include "dnamapping.h"

#define SignalMapLISTLENGTH 128

#define MAXRANDOM 2147483647

#define MAX_SIGNAL_EMISSION 512

#define MAX_EVENT_KMER 24

#define SignalEventListLISTLENGTH 1028

%}


struct SignalEvent
char base
double mean
double std
char kmer[MAX_EVENT_KMER]
double time_pos
double time_length


struct SignalEventList
char * name
SignalEvent ** event !list


struct SignalSeq
double * signal
int len // adjusted for the kmer length
int true_len
Sequence * called

struct SignalComp
int kmer
char kseq[20]
double mean
double sd
Probability em_prob[MAX_SIGNAL_EMISSION]
Score         em_score[MAX_SIGNAL_EMISSION]
double       em_weight[MAX_SIGNAL_EMISSION]

struct SignalMap
int kbasis
SignalComp ** comp
int len
int emission_length
double emission_start
double emission_end
double emission_step
Probability em_null[MAX_SIGNAL_EMISSION]

struct SignalSim
Probability insert
Probability stay_insert
Probability skip

%{
#include "dualsignal.h"



SignalMap * reverse_SignalMap(SignalMap * sm)
{
  SignalMap * out;
  SignalComp * comp;
  int i;
  int j;
  
  assert(sm != NULL);

  out = SignalMap_alloc();
  out->comp = (SignalComp **) calloc(sizeof(SignalComp *),out->len);

  out->kbasis = sm->kbasis;
  out->len = sm->len;
  out->emission_length = sm->emission_length;
  out->emission_start  = sm->emission_start;
  out->emission_end    = sm->emission_end;
  out->emission_step   = sm->emission_step;

  for(i=0;i<sm->emission_length;i++) {
    out->em_null[i] = sm->em_null[i];
  }

  for(i=0;i<out->len;i++) {
    comp = SignalComp_alloc();
    out->comp[i] = comp;

    comp->kmer = reverse_complement_dna_number(sm->comp[i]->kmer,out->kbasis);
    reverse_map_dna_number(comp->kmer,out->kbasis,comp->kseq);
    comp->mean = sm->comp[i]->mean;
    comp->sd   = sm->comp[i]->sd;
    for(j=0;j<out->emission_length;j++) {
      comp->em_prob[j]   = sm->comp[i]->em_prob[j];
      comp->em_score[j]  = sm->comp[i]->em_score[j];
      comp->em_weight[j] = sm->comp[i]->em_weight[j];
    }
  }

  return(out);

}





Score Score_offset_SignalMap(SignalMap * sm,SignalSeq * sseq,int i,Sequence * comp,int j)
{
  kmer_t kmer;
  int step;

  assert(sm != NULL);
  assert(sseq != NULL);
  assert(comp != NULL);

  if( j <= sm->kbasis ) {
    return NEGI;
  }

  /*  kmer = forward_dna_number_from_string(comp->seq - sm->kbasis + j,sm->kbasis); */
  kmer = forward_dna_number_from_string(comp->seq - sm->kbasis + j,sm->kbasis);
  
  step = (int)((sseq->signal[i] - sm->emission_start) / sm->emission_step);
/*
  fprintf(stdout,"Position %d,%d  signal %f, kmer step %d (start %f) score %d\n",i,j,sseq->signal[j],step,sm->emission_start, sm->comp[kmer]->em_score[step]);
*/



  if( step < 0 || step >= sm->emission_length ) {
    return NEGI;
  } else {
    /* fprintf(stderr,"for %d,%d, returning kmer %ld step %d - emission %d length %d \n",i,j,kmer,step,sm->emission_length,sm->len); */

    return( sm->comp[kmer]->em_score[step]);
  }

}

boolean flip_coin(Probability p)
{
  long rnd;

  if( p < 0.00000000001 ) {
    return 0;
  }

  rnd = random();

  if( ((double)rnd) / MAXRANDOM < p ) {
    return 1;
  } else {
    return 0;
  }

}

Probability generate_uniform(void) 
{
  long myrnd;

  myrnd = random();

  return ((double)myrnd / MAXRANDOM);
}

double draw_from_normal(double mean,double sd)
{
  double range;

  /*** this is not right ***/

  range = sd * 4;
  
  return(mean - (sd *2) + (generate_uniform() * range));
}

SignalSim * new_SignalSim(double insert,double stay_insert,double skip)
{
  SignalSim * out;

  out = SignalSim_alloc();

  out->skip = skip;
  out->insert = insert;
  out->stay_insert = stay_insert;

  return(out);
}


SignalSeq * simulated_SignalSeq_from_Seq(Sequence * seq,SignalMap * sm,SignalSim * sim)
{
  Sequence * true_call;
  kmer_t kmer;
  int i;
  int j;
  SignalSeq * out;
  
  char * tempseq;
  double * signal;

  /** ERROR - not pleasant **/

  /*  fprintf(stderr,"Doing a hack here... %d",seq->len);*/


  i = 0;
  j = 0;

  tempseq = calloc(seq->len*2,sizeof(char));
  signal = calloc(seq->len*2,sizeof(double));

  while( i < seq->len - sm->kbasis -1  ) {
    if( flip_coin(sim->skip) == 1 ) {
      i++;
      tempseq[j] = tolower(seq->seq[i]);
      signal[j] = 0.0;
      j++;
      continue;
    }
    

    kmer = forward_dna_number_from_string(seq->seq+i,sm->kbasis);

    signal[j] = draw_from_normal(sm->comp[kmer]->mean,sm->comp[kmer]->sd);
    tempseq[j] = seq->seq[i];
    
    j++;
    i++;
  }


  out = SignalSeq_alloc();
  out->signal = signal;
  out->called = new_Sequence_from_strings(seq->name,tempseq);
  out->len = j;
  out->true_len = j;
  return(out);
 
}



SignalSeq * read_SignalSeq(FILE * ifp)
{
  char buffer[MAXLINE];
  SignalSeq * out;
  int i;
  char * seq;
  char name[MAXLINE];
  double * signal;
  char * runner;
  int len;
  char base;
  double sig;

  

  assert(ifp != NULL);

  if( fgets(name,MAXLINE,ifp) == NULL ) {
    return NULL;
  }

  if( name[0] != '>' ) {
    warn("Bad SignalSequence, not starting with >");
  } else {
    runner = name+1;
    while( isalnum(*runner) || *runner == '_' ) {
      runner++;
    }

    (*runner) = '\0';
  }
  
  seq = calloc(1024,sizeof(char));
  signal = calloc(1024,sizeof(double));
  len = 1024;
    
  i = 0;

  assert(ifp != NULL);


  while( fgets(buffer,MAXLINE,ifp) != NULL) {

    if( buffer[0] == '/' && buffer[1] == '/' ) {
      break;
    }

    sscanf(buffer,"%c %lf\n",&base,&sig);

    if( !is_base(base) ) {
      warn("Bad base %c is signal sequence, skipping, but not ideal");
      continue;
    }

    /*    fprintf(stderr,"reading %c %f\n",base,sig); */

    seq[i] = base;
    signal[i] = sig;
    i++;
    if( i >= len ) {
      seq = realloc(seq,len*2*sizeof(char));
      signal = realloc(signal,len*2*sizeof(double));
      len = len*2;
    }
  }


  out = SignalSeq_alloc();
  out->called = Sequence_alloc();
 
  out->called->name = stringalloc(name+1);
  out->called->seq  = seq;
  out->called->len  = i;

  fprintf(stderr,"Got sequence %c%c%c length %d\n",out->called->seq[0],out->called->seq[1],out->called->seq[2],i);

  out->signal = signal;
  out->len = i;
  out->true_len = i;
  return(out);

}

void write_SignalSeq(SignalSeq * ss,FILE * ofp)
{
  int i;

  assert(ss != NULL);
  assert(ofp != NULL);

  fprintf(ofp,">%s\n",ss->called->name);
  for(i=0;i<ss->len;i++) {
    fprintf(ofp,"%c\t%f\n",ss->called->seq[i],ss->signal[i]);
  }

  fprintf(ofp,"//\n");
 
}

void write_SignalMap_absolute(SignalMap * sm,FILE * ofp)
{
  int i;
  int j;

  assert(sm != NULL);
  assert(ofp != NULL);

  
  fprintf(ofp,"# Written by DualSignal\n");
  fprintf(ofp,"kbasis %d\n",sm->kbasis);
  fprintf(ofp,"estart %lf\n",sm->emission_start);
  fprintf(ofp,"eend %lf\n",sm->emission_end);
  fprintf(ofp,"estep %lf\n",sm->emission_step);
  fprintf(ofp,"//\n");
  

  for(i=0;i<sm->len;i++) {
    fprintf(ofp,"%s",sm->comp[i]->kseq);
    for(j=0;j<sm->emission_length;j++) {
      fprintf(ofp,"\t%lf",sm->comp[i]->em_weight[j]);
    }
    fprintf(ofp,"\n");
  }

  return;
}

void dump_SignalMap_Scores(SignalMap * sm, FILE * ofp)
{
  int i;
  int j;

  assert(sm != NULL);
  assert(ofp != NULL);

  
  fprintf(ofp,"# Written by DualSignal\n");
  fprintf(ofp,"kbasis %d\n",sm->kbasis);
  fprintf(ofp,"estart %lf\n",sm->emission_start);
  fprintf(ofp,"eend %lf\n",sm->emission_end);
  fprintf(ofp,"estep %lf\n",sm->emission_step);
  fprintf(ofp,"//\n");
  

  for(i=0;i<sm->len;i++) {
    fprintf(ofp,"%s",sm->comp[i]->kseq);
    for(j=0;j<sm->emission_length;j++) {
      fprintf(ofp,"\t%d",sm->comp[i]->em_score[j]);
    }
    fprintf(ofp,"\n");
  }

  return;  


}

void write_SignalMap_normal(SignalMap * sm,FILE * ofp)
{
  int i;


  assert(sm != NULL);
  assert(ofp != NULL);

  
  fprintf(ofp,"# DualSignal dump\n");
  fprintf(ofp,"kbasis %d\n",sm->kbasis);

  for(i=0;i<sm->len;i++) {
    fprintf(ofp,"%s %lf %lf\n",sm->comp[i]->kseq,sm->comp[i]->mean,sm->comp[i]->sd);
  }

}

void prepare_SignalMap(SignalMap * sm,double pseudocount)
{
  int i;
  int j;
  double total;
  double weight_total[MAX_SIGNAL_EMISSION];
  double overall_total = 0.0;
   
  assert(sm != NULL);

  for(i=0;i<sm->emission_length;i++) {
    weight_total[i] = 0;
  }

  for(i=0;i<sm->len;i++) {
    total = 0.0;

    for(j=0;j<sm->emission_length;j++) {
      total += sm->comp[i]->em_weight[j] + pseudocount;
      weight_total[j] += sm->comp[i]->em_weight[j] + pseudocount;
      overall_total += sm->comp[i]->em_weight[j] + pseudocount;
    }

    for(j=0;j<sm->emission_length;j++) {
      sm->comp[i]->em_prob[j] = (sm->comp[i]->em_weight[j] + pseudocount) / total;
    }
    
  }

  for(j=0;j<sm->emission_length;j++) {
    sm->em_null[j] = weight_total[j]/ overall_total;
  }
  
  for(i=0;i<sm->len;i++) {

    for(j=0;j<sm->emission_length;j++) {
      sm->comp[i]->em_score[j] = Probability2Score(sm->comp[i]->em_prob[j] / sm->em_null[j]);
    }
    
  }
  
}

void convert_normal_to_absolute_SignalMap(SignalMap * sm,double weight)
{
  int i,j;
  double min_em;
  double max_em;
  int emission_length = 400;
  double total;
  
  assert(sm != NULL);

  /* find emission ranges */
  min_em = sm->comp[0]->mean - (sm->comp[0]->sd * 4) ;
  max_em = sm->comp[0]->mean + (sm->comp[0]->sd * 4);
  for(i=1;i<sm->len;i++) {
    if( sm->comp[i]->mean - (sm->comp[i]->sd * 4) < min_em ) {
      min_em = sm->comp[i]->mean - (sm->comp[i]->sd * 4);
    } 
    if( sm->comp[i]->mean + (sm->comp[i]->sd * 4) > max_em ) {
      max_em = sm->comp[i]->mean + (sm->comp[i]->sd * 4);
    } 
  }

  sm->emission_start = min_em;
  sm->emission_end   = max_em;

  sm->emission_length = emission_length;
  sm->emission_step = (max_em - min_em) / emission_length;

  /* now put in weights into each comp */

  for(i=0;i< sm->len;i++) {
    for(j=0;j< emission_length;j++) {
      /* everything gets a 0.0 weight - pseudocounts are added in prepare */
      sm->comp[i]->em_weight[j] = 0.0;
      /*
      fprintf(stdout,"Got %d step %d mean %f sd %f measure %f\n",
	      i,j,sm->comp[i]->mean,sm->comp[i]->sd,sm->emission_start + j*sm->emission_step);
      */


      if( (sm->emission_start + j*sm->emission_step) > (sm->comp[i]->mean - 4*sm->comp[i]->sd) &&
	  (sm->emission_start + j*sm->emission_step) < (sm->comp[i]->mean + 4*sm->comp[i]->sd) ) {
	/* is in distribution */
	 auto double prob_weight;

	/* take j to j+1 probability and multiply by weight */

	 prob_weight = ((crude_normal_probability(sm->comp[i]->mean,sm->comp[i]->sd,sm->emission_start + (j+1)*sm->emission_step)) - (crude_normal_probability(sm->comp[i]->mean,sm->comp[i]->sd,sm->emission_start + (j)*sm->emission_step))) ;
	 /*
	 fprintf(stdout,"For position %d, mean %f sd %f, step %d, measure %f, weight %f\n",
		 i,
		 sm->comp[i]->mean,
		 sm->comp[i]->sd,
		 j,
		 sm->emission_start + j*sm->emission_step,
		 prob_weight);
	 */

	sm->comp[i]->em_weight[j] += weight * prob_weight ;
	  }
    }
  }

  /*  convert weights to probabilities */
    
  convert_weight_to_Probability_SignalMap(sm);

  /*  make an average Probability for the NULL over k */


  for(j=0;j<sm->emission_length;j++) {
    total = 0.0;
    for(i=0;i<sm->len;i++) {
      total += sm->comp[i]->em_prob[j];
    }
    sm->em_null[j] = total / sm->len;
  }


  /* flip to score */

 
  for(i=0;i<sm->len;i++) {
    
    for(j=0;j<sm->emission_length;j++) {
      sm->comp[i]->em_score[j] = Probability2Score(sm->comp[i]->em_prob[j] / sm->em_null[j]);
    }
  }
  
  /* return */    


}


void convert_weight_to_Probability_SignalMap(SignalMap * sm)
{
  int i;
  int j;
  double total;

  assert(sm != NULL);

  for(i=0;i<sm->len;i++) {
    total = 0.0;

    for(j=0;j<sm->emission_length;j++) {
      total += sm->comp[i]->em_weight[j];
    }

    for(j=0;j<sm->emission_length;j++) {
      sm->comp[i]->em_prob[j] = sm->comp[i]->em_weight[j] / total;
    }

  }

}

SignalMap * read_SignalMap_absolute(FILE * ifp)
{
  char buffer[MAXLINE];
  int kb  = -1;
  double estart;
  double eend;
  double estep;
  boolean seen_start = 0;
  boolean seen_end   = 0;
  boolean seen_step  = 0;

  char kstring[MAXLINE];
  
  int i;
  int len;

  SignalMap * out = NULL;
  SignalComp * comp;

  char * runner;
  double temp;
  int count;
  
  assert(ifp != NULL);

 

  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    if( buffer[0] == '#' ) {
      continue;
    } 
    if( strstartcmp(buffer,"kbasis") == 0 ) {
      sscanf(buffer,"kbasis %d",&kb);
      assert(kb < 8);
      assert(kb > 0);
    }
    if( strstartcmp(buffer,"estart") == 0 ) {
      sscanf(buffer,"estart %lf",&estart);
      seen_start = 1;
    }
    if( strstartcmp(buffer,"eend") == 0 ) {
      sscanf(buffer,"eend %lf",&eend);
      seen_end = 1;
    }
    if( strstartcmp(buffer,"estep") == 0 ) {
      sscanf(buffer,"estep %lf",&estep);
      seen_step = 1;
    }
    if( strstartcmp(buffer,"//") == 0 ) {
      break;
    }
  }


  for(len=1, i = 0;i<kb;i++) {
    len = len * 4;
  }
  
  out = SignalMap_alloc_len(len);
  out->kbasis = kb;
  

  assert(seen_start != 0 && seen_end != 0 && seen_step != 0 && kb != -1 );

  out = SignalMap_alloc_len(len);
  out->kbasis = kb;
  out->emission_start = estart;
  out->emission_end   = eend;
  out->emission_step  = estep;
  out->emission_length = ceil((eend-estart) / estep);

  assert(out->emission_length < MAX_SIGNAL_EMISSION);


  assert(out != NULL);


  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    sscanf(buffer,"%s",kstring);
    comp = SignalComp_alloc();
    strcpy(comp->kseq,kstring);
    comp->kmer = forward_dna_number_from_string(comp->kseq,out->kbasis);
    out->comp[comp->kmer] = comp;

    /* move past the first string */

    for(runner = buffer;*runner && !isspace(*runner);runner++)
      ;

    /* now we expect emission length numbers */

    count = 0;
    while( count < out->emission_length ) {

      /* eat white space */
      for(;*runner && isspace(*runner);runner++)
	;
      
      /* slurp up number */
      if( sscanf(runner,"%lf",&temp) == 0 ) {
	warn("Bad number in count, bad line offset?, count %d, line %s",count,buffer);
	return NULL;
      }

      /* go through number */
      for(;*runner && !isspace(*runner);runner++)
	;

      /* eat white space */
      for(;*runner && isspace(*runner);runner++)
	;

      comp->em_weight[count] = temp;
      count++;
    }

  }

  return(out);
}

SignalMap * read_SignalMap_tsv(int ksize,FILE * ifp)
{
 char buffer[MAXLINE];
  int kb;
  char kstring[MAXLINE];
  double mean;
  double sd;
  int dummy;

  int len = 0;
  int i;

  SignalMap * out = NULL;
  SignalComp * comp;

  assert(ifp != NULL);
  assert(ksize > 0);


  for(len=1, i = 0;i<ksize;i++) {
    len = len * 4;
  }
  
  out = SignalMap_alloc_len(len);
  for(i=0;i<len;i++) {
    out->comp[i] = NULL;
  }

  out->kbasis = ksize;
  
  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    /* tab delimited, kmer, variant, level_mean level_stdy */
    sscanf(buffer,"%s\t%d\t%lf\t%lf",kstring,&dummy,&mean,&sd);
    if( dummy != 1 ) {
      warn("Bad tsv model string %s",buffer);
      continue;
    }

    comp = SignalComp_alloc();
    strcpy(comp->kseq,kstring);
    comp->kmer = forward_dna_number_from_string(comp->kseq,out->kbasis);
    comp->mean = mean;
    comp->sd = sd;
    /* fprintf(stderr,"Storing for kmer %d, %s %d\n",comp->kmer,comp->kseq,out->kbasis);*/
    out->comp[comp->kmer] = comp;

  }

  

  return out;
}


boolean validate_SignalMap_with_warnings(SignalMap * sm)
{
  int i;
  boolean ret = TRUE;

  char retstr[1024];


  assert(sm != NULL);

  retstr[sm->kbasis] = '\0';

  for(i=0;i<sm->len;i++) {
    if( sm->comp[i] == NULL ) {
      reverse_map_dna_number(i,sm->kbasis,retstr);
      warn("Kmer %d (%s) is NULL. SignalMap incomplete",i,retstr);
      ret = FALSE;
    }
  }
 

  return(ret);
}


SignalMap * read_SignalMap_normal(FILE * ifp)
{
  char buffer[MAXLINE];
  int kb;
  char kstring[MAXLINE];
  double mean;
  double sd;

  int len = 0;
  int i;

  SignalMap * out = NULL;
  SignalComp * comp;

  assert(ifp != NULL);

  

  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    if( buffer[0] == '#' ) {
      continue;
    } 
    if( strstartcmp(buffer,"kbasis") == 0 ) {
      sscanf(buffer,"kbasis %d",&kb);
      assert(kb < 8);
      assert(kb > 0);

      for(len=1, i = 0;i<kb;i++) {
	len = len * 4;
      }

      out = SignalMap_alloc_len(len);
      out->kbasis = kb;

      
      break;
    }
  }


  assert(out != NULL);

  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    sscanf(buffer,"%s %lf %lf",kstring,&mean,&sd);
    comp = SignalComp_alloc();
    strcpy(comp->kseq,kstring);
    comp->kmer = forward_dna_number_from_string(comp->kseq,out->kbasis);
    comp->mean = mean;
    comp->sd = sd;
    /* fprintf(stderr,"Storing for kmer %d, %s %d\n",comp->kmer,comp->kseq,out->kbasis);*/
    out->comp[comp->kmer] = comp;
  }


  return(out);
}



SignalMap * SignalMap_alloc_len(int len)
{
  SignalMap * out = NULL;

  assert(len > 0 );

  out = SignalMap_alloc();

  out->comp = calloc(len,sizeof(SignalComp*));
  out->len = len;

  return out;
}


SignalSeq * SignalSeq_from_SignalEventList(SignalEventList * sel)
{
  int i;
  SignalSeq * out;


  assert(sel != NULL);

  out = SignalSeq_alloc();
  out->signal = calloc(sizeof(double),sel->len);
  out->len = sel->len;
  
  out->called = Sequence_alloc();
  out->called->seq = calloc(sizeof(char),sel->len);

  out->called->name = stringalloc(sel->name);

  
  for(i=0;i<sel->len;i++) {
    out->signal[i] = sel->event[i]->mean;
    out->called->seq[i] = sel->event[i]->base;
  }

  
  return(out);

}

void write_SignalEventList(SignalEventList * sel,FILE * ofp)
{
  int i;


  assert(ofp != NULL);
  assert(sel != NULL);

  fprintf(ofp,">%s\n",sel->name);

  for(i=0;i<sel->len;i++) {
    fprintf(ofp,"%c\t%lf\t%lf\t%s\t%lf\t%lf\n",
	    sel->event[i]->base,
	    sel->event[i]->mean,
	    sel->event[i]->std,
	    sel->event[i]->kmer,
	    sel->event[i]->time_pos,
	    sel->event[i]->time_length);
  }


}


SignalEventList * read_SignalEventList(FILE * ifp)
{
  char buffer[MAXLINE];
  SignalEventList * out;
  SignalEvent * event;
  int i;

  char name[MAXLINE];
  
  double * signal;
  char * runner;
  int len;
  char base;
  double sig;
  double std;
  char kmer_str[MAXLINE];
  double time_pos;
  double time_len;

  

  assert(ifp != NULL);

  out = SignalEventList_alloc_std();


  if( fgets(name,MAXLINE,ifp) == NULL ) {
    return NULL;
  }

  if( name[0] != '>' ) {
    warn("Bad SignalSequence, not starting with >");
  } else {
    runner = name+1;
    while( isalnum(*runner) || *runner == '_' ) {
      runner++;
    }

    (*runner) = '\0';
  }
  
  out->name = stringalloc(name+1);
    
  while( fgets(buffer,MAXLINE,ifp) != NULL) {

    if( buffer[0] == '/' && buffer[1] == '/' ) {
      break;
    }

    sscanf(buffer,"%c %lf %lf %s %lf %lf\n",&base,&sig,&std,kmer_str,&time_pos,&time_len);

    if( !is_base(base) ) {
      warn("Bad base %c is signal sequence, skipping, but not ideal");
      continue;
    }

    event = SignalEvent_alloc();

    event->base  = base;
    event->mean = sig;
    event->std     = std;
    strncpy(event->kmer,kmer_str,MAX_EVENT_KMER);
    event->time_pos = time_pos;
    event->time_length = time_len;

    add_SignalEventList(out,event); 

  }


  return(out);

}



%}

