
%{
#include "dyna.h"

#define KMER_VECTOR_LENGTH 4069
#define KMER_VECTOR_SIZE   6

typedef struct KmerVectorPosition {
  char kmer_vector[KMER_VECTOR_LENGTH];
  long int position;
} KmerVectorPosition;

#define KmerVectorPositionSetLISTLENGTH 4096  

%}



struct KmerVectorPositionSet 
KmerVectorPosition ** vec !list 


%{
#include "vectorindex.h"



double vector_KmerVectorPosition(KmerVectorPosition * a,KmerVectorPosition * b)
{
  int i;
  double out = 0.0;

  for(i=0;i<KMER_VECTOR_LENGTH;i++) {
    out += a->kmer_vector[i] * b->kmer_vector[i] / 256;
  }

  return out;
}

KmerVectorPosition * new_KmerVectorPosition(void)
{
  KmerVectorPosition * out;

  out = malloc(sizeof(KmerVectorPosition));

  bzero(out->kmer_vector,KMER_VECTOR_LENGTH);

  return out;
}


KmerVectorPositionSet * build_KmerVectorPositionSet(Sequence * input,long int start_pos,int step_size)
{
  int i;
  int j;
  int k;
  int base[KMER_VECTOR_SIZE];
  int temp;

  int is_forward;
  int curr;

  int forward;
  int backward;

  int vec;

  KmerVectorPosition * pos;
  KmerVectorPositionSet * out;

  assert(input != NULL);

  temp = 1;
  for(i=0;i<KMER_VECTOR_SIZE;i++) {
    base[i] = temp;
    temp = temp * 4;
  }

  out= KmerVectorPositionSet_alloc_len((input->len / step_size)+2);
  
  for(i=0;i+step_size<input->len;) {
    pos = new_KmerVectorPosition();
    pos->position = start_pos + i;
    for(j=0;j<256 - KMER_VECTOR_SIZE;j++) {
      curr = i+j;
      /* first find lexical forward/backwardness */
      is_forward = 1; /* palindromes read forward */
      for(k=0;k<KMER_VECTOR_SIZE;k++) {
	forward  = base_from_char(input->seq[curr+k]);
	backward = complement_base(base_from_char(input->seq[curr+KMER_VECTOR_SIZE-k]));
	if( forward == backward ) {
	  continue;
	}
	if( forward > backward ) {
	  is_forward = 1;
	} else {
	  is_forward = 0;
	}
	break;
      }
      
      vec = 0;
      for(k=0;k<KMER_VECTOR_SIZE;k++) {
	if( is_forward ) {
	  vec += base[k] * base_from_char(input->seq[curr+k]);
	} else {
	  vec += base[k] * complement_base(base_from_char(input->seq[curr+KMER_VECTOR_SIZE-k]));
	}
      }

      assert(vec < KMER_VECTOR_LENGTH);
      pos->kmer_vector[vec]++;

      
      fatal("Ewan has not finished this yet! Idiot!");

    }
  }


  return out;
}


KmerVectorPosition * free_KmerVectorPosition(KmerVectorPosition * vec)
{
  free(vec);
  return NULL;
}

%}
