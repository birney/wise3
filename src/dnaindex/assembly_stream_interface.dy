
%{
#include "assembly.h"


%}


struct AssemblySequenceStream
AssemblySequence * (*next_AssemblySequence)(void *) !func
void (*free_handle)(void *) !func
void * handle !link


%{
#include "assembly_stream_interface.h"


%func
provides specific deconstructor 
%%
!deconstructor
AssemblySequenceStream * free_AssemblySequenceStream(AssemblySequenceStream * obj)
{
  int return_early = 0;    
  
  
  if( obj == NULL) {  
    warn("Attempting to free a NULL pointer to a AssemblySequenceStream obj. Should be trappable");    
    return NULL;   
  }  
  
#ifdef PTHREAD   
  assert(pthread_mutex_lock(&(obj->dynamite_mutex)) == 0); 
#endif   
  if( obj->dynamite_hard_link > 1)     {  
    return_early = 1;  
    obj->dynamite_hard_link--; 
  }  
#ifdef PTHREAD   
  assert(pthread_mutex_unlock(&(obj->dynamite_mutex)) == 0);   
#endif   
    if( return_early == 1)   
      return NULL;   
    

  if( obj->handle != NULL ) {
    if( obj->free_handle == NULL ) {
      warn("In assembly stream constructor, no free function for handle. Probably will leak memory");
    } else {
      (*obj->free_handle)(obj->handle);
    }
  }

  free(obj);

  return NULL;
}

%}
