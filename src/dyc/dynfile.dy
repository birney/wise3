/*  Last edited: Apr 29 10:02 1997 (birney) */



%{
#include "wisebase.h"
#include "funcinfo.h"
#include "inputfile.h"

#define DYNFILELISTLENGTH  1024

enum desctype {
  DYN_DESC_EDDY = 56
};


typedef int FuncOrderType;

enum fotype {
  FO_CUI_ALPHABETICAL = 83,
  FO_CUI_POSITION
};

%}


struct DYNFILE
int desc_type !def="DYN_DESC_EDDY"
char line[1024]
char *tag[128] !link
int  commentstart;
int  bracelevel !def="0"
boolean infunc !def="FALSE"
char * sourceroot;
FILE * func !link
FILE * head !link
FILE * html !link
FuncInfo ** info !list
ModuleInfo * mi
int funcpos !def="0"
int code_debug_level !def="0"
boolean should_hard_link !def="FALSE"
char * package_name !def="NULL"


%{
#include "dynfile.h"
#include "linesubs.h"

%func
makes a pdoc for this file.

%arg
dfp DYNFILE object
%%
boolean make_pdoc_output(DYNFILE * dfp,char * mod_name,FILE * ofp)
{
  /*int i;*/

  /*** first thing is to add the module name as a link to this file ***/

  fprintf(ofp,"&%s\n",mod_name);

  /*** at the moment we don't handle module info ***/

  /*** ok - now write out a head-list for functions ***/

  return TRUE;
}
  

%func 
reports back whether there are any undocumented
file. if should_complain is TRUE, will issue
warnings through warn. Writes the number of
undocumented functions into no
%arg
dfp DYNFILE object
no w pointer to some memory for the number of undoc'd funcs
should_complain if TRUE, will issue warn statements
%%
boolean have_got_unknown_func_DYNFILE(DYNFILE * dfp,int * no,boolean should_complain)
{
  int i;
  boolean ret = FALSE;
  

  *no =0;

  for(i=0;i<dfp->len;i++) 
    if( dfp->info[i]->functype == FI_UNKNOWN) {
      ret = TRUE;
      (*no)++;
      if( should_complain == TRUE) {
	warn("You have not documented %s",dfp->info[i]->name);
      }
    }

  return ret;
}

%func
writes basically just the #include "self.h" line
in the dynamite file
%%
void write_Dynamite_minimal_func(DYNFILE * dfp)
{
  fprintf(dfp->func,"#include \"%s.h\"\n\n",dfp->sourceroot);
  dfp->funcpos+=2;

  return;
}

%func
Finds a funcinfo with name. returns NULL
if it cant find them
%%
FuncInfo * FuncInfo_from_name_DYNFILE(DYNFILE * dfp,char * name)
{
  int i;

  for(i=0;i<dfp->len;i++) 
    if( strcmp(dfp->info[i]->name,name) == 0 ) 
      return dfp->info[i];

  return NULL;
}

%func
Deprecated - use pdoc
%type internal
%%
void show_html_DYNFILE(DYNFILE * dfp,FILE * ofp,FuncOrderType type)
{
  int i;

  sort_DYNFILE_FuncOrderType(dfp,type);
  
  if( is_separated_types(type) == TRUE) {

    fprintf(ofp,"Externally called functions functions\n<ul>");
    for(i=0;i<dfp->len;i++) {
      if( dfp->info[i]->functype != FI_CALLABLE) {
	break;
      }
      fprintf(ofp,"<li><a href=\"#%s\"> %s </a>\n",dfp->info[i]->name,dfp->info[i]->complete_name);
    }
    fprintf(ofp,"</ul><p>Unplaced (no information about calling) functions\n<ul>");
    for(;i<dfp->len;i++) {
      if( dfp->info[i]->functype != FI_UNKNOWN) {
	break;
      }
      fprintf(ofp,"<li><a href=\"#%s\"> %s </a>\n",dfp->info[i]->name,dfp->info[i]->complete_name);
    }
    fprintf(ofp,"</ul><p>Internal (unlikely to be called directly) functions\n<ul>");
    for(;i<dfp->len;i++) {
      fprintf(ofp,"<li><a href=\"#%s\"> %s </a>\n",dfp->info[i]->name,dfp->info[i]->complete_name);
    }
    
    fprintf(ofp,"</ul><hr>Externally called functions<p>\n");
    for(i=0;i<dfp->len;i++) {
      if( dfp->info[i]->functype != FI_CALLABLE) {
	break;
      }
      fprintf(ofp,"<a name=\"%s\"> %s </a><p>Description<pre>\n",dfp->info[i]->name,dfp->info[i]->complete_name);
      dump_Ftext(dfp->info[i]->ft,ofp);
      fprintf(ofp,"</pre>\n");
    }
    
    fprintf(ofp,"<hr>Unplaced functions<p>\n");
    for(;i<dfp->len;i++) {
      if( dfp->info[i]->functype != FI_UNKNOWN) {
	break;
      }
      fprintf(ofp,"<a name=\"%s\"> %s </a><p>Description<pre>\n",dfp->info[i]->name,dfp->info[i]->complete_name);
      dump_Ftext(dfp->info[i]->ft,ofp);
      fprintf(ofp,"</pre>\n");
    }
    fprintf(ofp,"<hr>Internal functions<p>\n");
    for(;i<dfp->len;i++) {
      fprintf(ofp,"<a name=\"%s\"> %s </a><p>Description<pre>\n",dfp->info[i]->name,dfp->info[i]->complete_name);
      dump_Ftext(dfp->info[i]->ft,ofp);
      fprintf(ofp,"</pre>\n");
    }
  } else {
    warn("Can't currently handle no CUI sorted Html functions, yikes");
  }

}

%func
Places the function declaration potential with
package protection
%type internal
%%  
int place_func_decl(DYNFILE * dfp,FuncInfo * fi)
{

  fprintf(dfp->head,"%s ",fi->ret->type);
  
  fprintf(dfp->head,"%s%s;\n",dfp->package_name == NULL ? "" : dfp->package_name,fi->stripped_return);
  if( dfp->package_name != NULL ) {
    fprintf(dfp->head,"#define %s %s%s\n",fi->name,dfp->package_name,fi->name);
    return 2;
  }
  else {
    return 1;
  }
}


%func  
writes the header declarations of functions
into the header file, with documentation.

The FuncOrderType is either the more common,
usual order or alphabetical
%%  
void place_declarations_DYNFILE(DYNFILE * dfp,FuncOrderType type)
{
  int i;

  sort_DYNFILE_FuncOrderType(dfp,type);

  if( is_separated_types(type) == TRUE) {
    fprintf(dfp->head,"\n\n    /***************************************************/\n");
    fprintf(dfp->head,    "    /* Callable functions                              */\n");
    fprintf(dfp->head,    "    /* These are the functions you are expected to use */\n");
    fprintf(dfp->head,    "    /***************************************************/\n\n");
    for(i=0;i<dfp->len;i++) {
      if( dfp->info[i]->functype != FI_CALLABLE) {
	break;
      }
      fprintf(dfp->head,"\n\n");
      show_eddystyle_FuncInfo(dfp->info[i],dfp->head);
      place_func_decl(dfp,dfp->info[i]);

    }
    
    fprintf(dfp->head,"\n\n  /* Unplaced functions */\n");
    fprintf(dfp->head,"  /* There has been no indication of the use of these functions */\n");
    for(;i<dfp->len;i++) {
      if( dfp->info[i]->functype != FI_UNKNOWN) {
	break;
      }

      place_func_decl(dfp,dfp->info[i]);

    }
    
    fprintf(dfp->head,"\n\n    /***************************************************/\n");
    fprintf(dfp->head,    "    /* Internal functions                              */\n");
    fprintf(dfp->head,    "    /* you are not expected to have to call these      */\n");
    fprintf(dfp->head,    "    /***************************************************/\n");
    for(;i<dfp->len;i++) {
      place_func_decl(dfp,dfp->info[i]);
    }
    
  } /*** not separated types ***/
  else {
    for(i=0;i<dfp->len;i++) {
      fprintf(dfp->head,"\n\n");
      show_eddystyle_FuncInfo(dfp->info[i],dfp->head);

      place_func_decl(dfp,dfp->info[i]);

    }
  }

 
  
}

%func
really a sub-routine. Sorts by the FuncOrderType
which can be alphabetical or by original position
%type internal
%%
void sort_DYNFILE_FuncOrderType(DYNFILE * dfp,FuncOrderType type)
{
  switch (type) {
  case FO_CUI_ALPHABETICAL :
    sort_DYNFILE(dfp,compare_two_FuncInfo_alpha);
    break;
  case FO_CUI_POSITION :
    sort_DYNFILE(dfp,compare_two_FuncInfo_pos);
    break;
  default :
    warn("Got an unnw FuncOrderType %d",type);
  }

  return;


}

%func
Tells whether this sorting will separate
things into Callable/unknown/internal. All
sorts currently do
%type internal
%%
boolean is_separated_types(FuncOrderType type)
{
  if( type == FO_CUI_ALPHABETICAL || type == FO_CUI_POSITION)
    return TRUE;
  return FALSE;
}

%func
comparison function for sorting by functype then alphabetical
%type internal
%%
int compare_two_FuncInfo_alpha(FuncInfo * one,FuncInfo * two)
{
  if( one->functype != two->functype ) {
    return one->functype - two->functype;
  }
  return strcmp(one->name,two->name);
}


%func
comparison function for sorting by functype then by file position
%type internal
%%
int compare_two_FuncInfo_pos(FuncInfo * one,FuncInfo * two)
{
  if( one->functype != two->functype ) {
    return one->functype - two->functype;
  }
  return one->infopos - two->infopos;
}

%func
places the positions of functions as read in the file
(hopefully) into the funcinfos so can be sorted on
them (and rearranged potentially)
%%
void positionify_DYNFILE(DYNFILE * dfp)
{
  int i;

  for(i=0;i<dfp->len;i++)
    dfp->info[i]->infopos = i;
}


void show_FuncInfo_DYNFILE(DYNFILE * dfp,FuncInfo * fi)
{
  switch (dfp->desc_type) {
  case DYN_DESC_EDDY : 
    dfp->funcpos += show_eddystyle_FuncInfo(fi,dfp->func);
    break;
  default :
    warn("No func descirption like %d",dfp->desc_type);
    break;
  }

}
    
 /**
 FuncInfo * find_FuncInfo_from_name_end(DYNFILE * dfp,char * name)
 {
  int i;

  for(i=dfp->len-1;i >= 0;i--) 
    if( strcmp(dfp->info[i]->name,name) == 0 )
      return dfp->info[i];

  return NULL;
 }
 **/


  /*** really for output ***/

%func
complex function, better written with
regex's. Tests whether the probe is actually
a in a "open" string, ie. complete string
outside of " or other things. 

this is mainly for use of finding if's and for's
in C statements

it is a horrible kludge, and hopefully now not used
%type internal
%%
char * strinopen(char * target,char * probe)
{
  register char * p;
  register char * t;	
  register char * start;
  
  start = target;
  
  for(;*target;target++)
    {
      if( *target == '"')
	{
	  for(target++;*target && *target != '"';target++)
	    ;
	  if( *target != '"' )
	    break;
	  target++;
	}
      if( *target == *probe )
	{
	  if( target != start )
	    if( isalpha(*(target-1)) )
	      continue;
	  for(p=probe,t=target;*p && *t;p++,t++)
	    if( *p != *t )
	      break;
	  
	  if( isalpha(*(t)) )
	    continue;
	  
	  if( *p == '\0')
	    return target;
	}
    }
  return NULL;
}


boolean real_is_unfinished_expression(char * str)
{
  char * runner;
  
  runner = str+strlen(str)-1;
  
  while( isspace(*runner) && runner >= str )
    runner--;
  
  if( runner == str)
    return FALSE;
  
  if( strinopen(str,"if") != NULL || strinopen(str,"for") != NULL || strinopen(str,"while") != NULL || strinopen(str,"switch") != NULL || 
     strinopen(str,"case") != NULL || strinopen(str,"default") )
    return FALSE;
  
  if( *str == '#' )
    return FALSE;
  
  if( *runner == ';')
    return FALSE;
  if( (runner=strinopen(str,"else")) != NULL)
    {
      for(;isalpha(*runner) && *runner;runner++)
	;
      for(;!isalnum(*runner) && *runner;runner++) 
	;
      if( *runner == '\0')
	return FALSE;
      else	return TRUE;
    }
  return TRUE;
}



void flush_line(DYNFILE * dfp)
{
  register char * temp;

  if( *dfp->line != '\0') {
      temp = scan_and_replace_line(dfp->line);
      fprintf(dfp->func,"%s \n",temp);
      strcpy(dfp->line,"");
      dfp->funcpos++;
    }  
}

void flush_line_to_header(DYNFILE * dfp)
{
  register char * temp;

  if( *dfp->line != '\0') {
      temp = scan_and_replace_line(dfp->line);
      fprintf(dfp->head,"%s \n",temp);
      strcpy(dfp->line,"");
    }
}



/*** this function is going to "pad" the line with spaces to the next
  comment block level ***/

void pad_line(DYNFILE * dfp)
{
  register int i;
  int len;
  int nlen;

  if(dfp->commentstart == 0 || strlen(dfp->line)+1 > dfp->commentstart) {
    /** ok, have to find the new level **/
    len = strlen(dfp->line);
    nlen = len + (len%4 == 0 ? 0 : 4-len%4);
    for(i=len;i<nlen;i++)
      dfp->line[i] = ' ';
    dfp->line[i]='\0';
  }
  else {
    for(i=strlen(dfp->line);i<dfp->commentstart;i++)
      dfp->line[i] = ' ';
    dfp->line[i]='\0';
  }
}

/** puts in a double break **/

void add_break(DYNFILE * dfp)
{
  flush_line(dfp);
	
  fprintf(dfp->func,"\n\n");
  dfp->commentstart=0;
  dfp->funcpos+=2;

}


void start_function(DYNFILE * dfp,char * str, ...)
{
  FuncInfo * fi;
  char buffer[MAXLINE];
  va_list ap;

  va_start(ap,str);
  vsprintf(buffer,str,ap);
  va_end(ap);

  /** we have no FuncInfo - make a dummy! **/

  fi = FuncInfo_from_str("Undocumented function from internal dynamite code");

  start_function_FuncInfo(fi,dfp,buffer);
  
}

void start_function_FuncInfo(FuncInfo * fi,DYNFILE * dfp,char * str, ... )
{
  char buffer[MAXLINE];
  va_list ap;

  va_start(ap,str);
  vsprintf(buffer,str,ap);
  va_end(ap);

  if( reconcile_FuncInfo_with_funcstr(fi,buffer) == FALSE ) {
    warn("Internal error with function [%s]: Not reconciled with documentation");
    add_break_to_Ftext(fi->ft);
    add_line_to_Ftext(fi->ft,"WARNING: This function's internal documentation was not reconciled with its argument list");
  }

  show_FuncInfo_DYNFILE(dfp,fi);
  fi->line_in_c = dfp->funcpos;
  fi->complete_name = stringalloc(buffer);

  add_DYNFILE(dfp,fi);

  true_start_function(dfp,buffer);
}

void true_start_function(DYNFILE * dfp,char * str, ... )
{
  va_list ap;
  register int i;


  /** put away whatever was there before **/
  flush_line(dfp);
  
  
  for(i=0;i<128;i++)
    dfp->tag[i]=NULL;
  
  va_start(ap,str);
  vsprintf(dfp->line,str,ap);
  va_end(ap);


  if( dfp->bracelevel > 0 ) {
    warn("In dynfile... you are attempting to start a function [%s] inside a separate brace syste. Bad bad news!",dfp->line);
  }

  flush_line(dfp);


  /*** start function ***/
  
  fprintf(dfp->func,"{\n");
  dfp->funcpos++;
  dfp->bracelevel++;
  dfp->infunc = TRUE;

  return;
}

void close_function(DYNFILE * dfp)
{
  if( dfp->infunc == FALSE ){
    warn("Attempting to close a function when you are not even in one... problem surely!");
  }

  flush_line(dfp);
  
  dfp->bracelevel--;
  
  strcpy(dfp->line,"} ");
  dfp->commentstart=0;
  pad_line(dfp);
}



void hang_expr(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;
  
  flush_line(dfp);
  
  dfp->bracelevel++;
  current_indent(dfp);
  dfp->bracelevel--;
  
  va_start(ap,str);
  vsprintf(buffer,str,ap);
  va_end(ap);
  strcat(dfp->line,buffer);

  if( real_is_unfinished_expression(buffer) )
    strcat(dfp->line,"; ");
  
  pad_line(dfp);
}

void expr(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;

  flush_line(dfp);
  current_indent(dfp);


  va_start(ap,str);
  vsprintf(buffer,str,ap);
  va_end(ap);
  strcat(dfp->line,buffer);

  if( real_is_unfinished_expression(buffer) )
    strcat(dfp->line,"; ");

  
  pad_line(dfp);
}

void macro(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;
  
  flush_line(dfp);
  
  va_start(ap,str);
  vsprintf(buffer,str,ap);
  
  if(buffer[0] != '#')
    warn("asking for macro without # as first letter");
  

  /** no ident! **/
  strcat(dfp->line,buffer);
  
  pad_line(dfp);
}


void warn_expr(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  char buf2[MAXLINE];
  va_list ap;
  
  flush_line(dfp);
  
  current_indent(dfp);
  
  
  va_start(ap,str);
  
  vsprintf(buffer,str,ap);
  
  sprintf(buf2,"warn(\"%s\");",buffer);
  
  strcat(dfp->line,buf2);
  
  pad_line(dfp);
}


void start_struct(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;
  
  
  flush_line_to_header(dfp);
  
  va_start(ap,str);
  
  vsprintf(buffer,str,ap);
  
  strcat(dfp->line,buffer);
  strcat(dfp->line," { ");
  flush_line_to_header(dfp);
  dfp->bracelevel=1;
}



void close_struct(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;
  
  flush_line_to_header(dfp);
  
  va_start(ap,str);
  
  vsprintf(buffer,str,ap);
  
  current_indent(dfp);
  
  strcat(dfp->line,"} ");
  strcat(dfp->line,buffer);
  
  pad_line(dfp);
  
  dfp->bracelevel--;
  flush_line_to_header(dfp);

}
	
void struct_macro(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;

  flush_line_to_header(dfp);

  va_start(ap,str);
  vsprintf(buffer,str,ap);
  va_end(ap);
  strcat(dfp->line,buffer);

  pad_line(dfp);
}

void struct_expr(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;

  flush_line_to_header(dfp);
  current_indent(dfp);


  va_start(ap,str);
  vsprintf(buffer,str,ap);
  va_end(ap);
  strcat(dfp->line,buffer);

  if( real_is_unfinished_expression(buffer) )
    strcat(dfp->line,"; ");

  
  pad_line(dfp);
}



 /*** Comments ***/

void add_block_comment(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;
  
  flush_line(dfp);
  
  va_start(ap,str);
  vsprintf(buffer,str,ap);
  va_end(ap);

  current_indent(dfp);
  
  strcat(dfp->line,"/* ");
  strcat(dfp->line,buffer);
  strcat(dfp->line," */");
  
  dfp->commentstart=0;
  
}

void add_end_comment(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;
  

  va_start(ap,str);
  
  vsprintf(buffer,str,ap);

  strcat(dfp->line,"/* ");
  strcat(dfp->line,buffer);
  strcat(dfp->line," */");

  flush_line(dfp);
}

void add_end_comment_header(DYNFILE * dfp,char * str, ...)
{
  char buffer[MAXLINE];
  va_list ap;
  

  va_start(ap,str);
  
  vsprintf(buffer,str,ap);

  strcat(dfp->line,"/* ");
  strcat(dfp->line,buffer);
  strcat(dfp->line," */");

  flush_line_to_header(dfp);
}
	

void set_commentstart(DYNFILE * dfp,int s)
{
  
  dfp->commentstart=s;
}
	
			
void current_indent(DYNFILE * dfp)
{
  register int i;
  
  dfp->line[0] = '\0';
  
  if( dfp->bracelevel == 0)
    return;	
  
  strcat(dfp->line,"  ");
  for(i=0;i<dfp->bracelevel;i++ ){
    strcat(dfp->line,"  ");
    }
  
}
	
void startcase(DYNFILE * dfp)
{
  flush_line(dfp);
  dfp->bracelevel++;
}

void closecase(DYNFILE * dfp)
{
  flush_line(dfp);
  dfp->bracelevel--;
}




void startbrace_tag(DYNFILE * dfp,char * str)
{
  strcat(dfp->line," { ");
  dfp->bracelevel++;
  strcat(dfp->line,"/*");
  strcat(dfp->line,str);
  strcat(dfp->line,"*/");
  flush_line(dfp);
  if( dfp->tag[dfp->bracelevel] != NULL) {
      warn("Missalgined tags in tag brace. Bad bad bug");
      dfp->tag[dfp->bracelevel] = NULL;
    }
  
  dfp->tag[dfp->bracelevel]=stringalloc(str);
  
}

void startbrace(DYNFILE * dfp)
{
  strcat(dfp->line," { ");
  flush_line(dfp);
  dfp->bracelevel++;
}

void closebrace(DYNFILE * dfp)
{
  flush_line(dfp);
  current_indent(dfp);
  strcat(dfp->line,"} ");
  if( dfp->tag[dfp->bracelevel] != NULL) {
      add_end_comment(dfp,"end of %s",dfp->tag[dfp->bracelevel]);
      dfp->tag[dfp->bracelevel]=ckfree(dfp->tag[dfp->bracelevel]);
    }
  
  flush_line(dfp);
  dfp->bracelevel--;
  dfp->commentstart=0;
}


void fputs_func_DYNFILE(char * str,DYNFILE * dfp)
{
  fputs(str,dfp->func);
  fputc('\n',dfp->func);
  dfp->funcpos++;
}


 /** I/O stuff **/


DYNFILE * open_std_no_html_dynfile(char * name)
{
  return open_std_dynfile(name,NULL);
}

DYNFILE * open_std_dynfile(char * name,char * html_directory)
{
  DYNFILE * dfp;
  char func_buf[512];
  char head_buf[512];
  char html_buf[1024];
  int len;

  if( (len=strlen(name)) > 509 ) {
    warn("I can't believe this, but you are attempting to open a DYNFILE with a name longer than 509 letter. Surely not! [%s]",name);
    return NULL;
  }

  if( html_directory != NULL && strlen(html_directory) + len > 1020 ) {
    warn("I can't believe this, but a combination of the html directory path and the dynamite name is over 1020 letters. Can't handle it [%s][%s]",html_directory,name);
    return NULL;
  }

  
  sprintf(func_buf,"%s.c",name);
  sprintf(head_buf,"%s.h",name);
  if( html_directory != NULL ) 
    sprintf(html_buf,"%s/%s.html",html_directory,name);



  dfp = DYNFILE_alloc_std();

  dfp->func = openfile(func_buf,"W");
  if( dfp->func == NULL ) {
    close_dynfile(dfp);
    warn("Could not open %s as a function file",func_buf);
    return NULL;
  }


  dfp->head = openfile(head_buf,"W");
  if( dfp->head == NULL ) {
    close_dynfile(dfp);
    warn("Could not open %s as a header file",head_buf);
    return NULL;
  }

  if( html_directory != NULL ) {
    dfp->html = openfile(html_buf,"W");
    if( dfp->html == NULL ) {
      close_dynfile(dfp);
      warn("Could not open %s as a html file",html_buf);
      return NULL;
    }
  }

  /*** put in "standard" headers etc ****/

  fprintf(dfp->head,"#ifndef DYNAMITE%sHEADERFILE\n#define DYNAMITE%sHEADERFILE\n",name,name);
  fprintf(dfp->head,"#ifdef _cplusplus\nextern \"C\" {\n#endif\n");
  fprintf(dfp->func,"#ifdef _cplusplus\nextern \"C\" {\n#endif\n");
  
  dfp->sourceroot = stringalloc(name);
 
  /*** put in standard header ***/

  dfp->funcpos = 3; /* function file on its 3rd line */


  return dfp;
}

void close_dynfile(DYNFILE * dfp)
{
  
  /*** finish C function file ***/
  flush_line(dfp);

  /*** finish C header file ***/

  fprintf(dfp->func,"\n#ifdef _cplusplus\n}\n#endif\n");
  fprintf(dfp->head,"\n#ifdef _cplusplus\n}\n#endif\n");
  fprintf(dfp->head,"\n#endif\n");



  if( dfp->html != NULL)
    fclose(dfp->html);

  if( dfp->head != NULL)
    fclose(dfp->head);

  if( dfp->func != NULL)
    fclose(dfp->func);

  dfp = free_DYNFILE(dfp);
  
}

  
    


%}
