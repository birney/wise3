/*  Last edited: Jan 13 16:56 1997 (birney) */


%{

#include "wisebase.h"
#include "dynfile.h"


/********************************************************/
/* Wisetools version 3 file                             */
/*                                                      */
/* this file is copyright (c) Ewan Birney 1996          */
/* this file is part of the wisetools sequence analysis */
/* package                                              */
/********************************************************/

/********************************************************/
/* Display is an internal module for dynamite itself    */
/* to manage the display tag found in dynamite files    */
/*                                                      */
/*                                                      */
/********************************************************/

/***** RCS Info *****************************************/
/*
   $Id: 

   $Log: 
*/
/*********************************************************/



#define Label2DisplayLISTLENGTH    32
#define Sequence2DisplayLISTLENGTH 32
#define Aln2DisplayLISTLENGTH      32

#define ALL_OTHER_NUMBER (-10)

%}


struct Aln2DisplayField
char * string
char * length
char * direction
char * convert
boolean is_static !def="FALSE"
boolean is_string !def="FALSE"
boolean is_single !def="FALSE"
boolean is_sub    !def="FALSE"


struct Index2Display
char * name;
char * eval;
boolean is_start; !def="FALSE"
int number;

struct Label2Display
char * label
char * direction  
Aln2DisplayField ** a2df !list
Index2Display ** i2d !list !len="ind_"
boolean is_lone !def="FALSE"

struct Sequence2Display
int number
Label2Display ** l2d !list
Index2Display ** i2d !list !len="ind_"
char * name_str;
int length; // of name
boolean is_static !def="FALSE"
char * direction

struct Aln2DisplayResource
char * type;
char * name;
char * arg;


struct Aln2Display
char * name
Aln2DisplayResource ** a2dr !list !len="res_"
Sequence2Display ** s2d !list
Sequence2Display * other


%{
#include "display.h"





void write_Aln2Display_header(DYNFILE * dfp,Aln2Display * a2d)
{
  return;
}


void write_Aln2Display_function(DYNFILE * dfp,Aln2Display * a2d)
{

  write_Aln2Display_convert_func(dfp,a2d);

}


void write_Aln2Display_convert_func(DYNFILE * dfp,Aln2Display * a2d)
{
  register int i;
  register int j;
  register int k;
  char buffer[MAXLINE];


  /*** assume file is already loaded into writec ***/


  sprintf(buffer,"AlnDisplay * convert_AlnBlock_to_AlnDisplay_%s(AlnBlock * alb ",a2d->name);
  for(i=0;i<a2d->res_len;i++) {
    strcat(buffer,",");

    strcat(buffer,a2d->a2dr[i]->type);
    strcat(buffer,a2d->a2dr[i]->name);
  }
  strcat(buffer,")");

  start_function(dfp,buffer);
  expr(dfp,"AlnDisplay * out");
  expr(dfp,"AlnDisplayColumn * adc;");
  expr(dfp,"AlnDisplayUnit * adu;");
  expr(dfp,"AlnDisplayField * adf;");
  expr(dfp,"AlnDisplayNameBlock * adnb;");
  expr(dfp,"AlnDisplayNameUnit * adnu;");
  expr(dfp,"AlnIndexField * aif;");
  expr(dfp,"AlnDisplayIndexUnit * adiu;");
  expr(dfp,"AlnDisplayIndex * adi;");
  expr(dfp,"AlnColumn * alc;");
  expr(dfp,"AlnUnit   * alu;");
  expr(dfp,"char tempbuf[512]");

  add_break(dfp);

  expr(dfp,"out = new_AlnDisplay(alb->len)");
  add_break(dfp);
  
  for(i=0;i<a2d->len;i++) {
    expr(dfp,"adnb = AlnDisplayNameBlock_no_get(out,%d);",i);
    expr(dfp,"adnb->direction = ALN_DISPLAY_%s",a2d->s2d[i]->direction);
    expr(dfp,"adnu = get_next_AlnDisplayNameUnit(adnb);");
    if( a2d->s2d[i]->name_str != NULL) {
      expr(dfp,"adnu->name = %s;",a2d->s2d[i]->name_str);
      expr(dfp,"adnu->should_free = %s;",a2d->s2d[i]->is_static == TRUE ? "FALSE" : "TRUE");
    }
    else {
      expr(dfp,"adnu->name = \"NoName\";");
      expr(dfp,"adnu->should_free = FALSE;");
    }

    if( a2d->s2d[i]->ind_len > 0 ) {
      /* get the index  */
      add_break(dfp);
      add_block_comment(dfp,"This sequence has got an index, get the alndisplayindex");
      expr(dfp,"adi = AlnDisplayIndex_no_get(out,%d);",i);
      expr(dfp,"adi->direction = ALN_DISPLAY_%s",a2d->s2d[i]->direction);
      for(j=0;j< a2d->s2d[i]->ind_len;j++) {
	auto Index2Display  * i2d;
	i2d = a2d->s2d[i]->i2d[j];
	
	expr(dfp,"adiu = get_next_AlnDisplayIndexUnit(adi);");
	expr(dfp,"adiu->start = %s",i2d->eval == NULL ? "0" : i2d->eval);
	add_break(dfp);
      }
    } /* end of if index*/
  } /* end of for */

  


  expr(dfp,"for(alc = alb->start;alc != NULL;alc = alc->next)");
  startbrace_tag(dfp,"all columns in AlnBlock");
  expr(dfp,"adc = new_terminal_AlnDisplayColumn(out);");
  
  /*** go over each sequence, and move the labels across ***/

  for(i=0;i<a2d->len;i++) {
    j = 0;
    expr(dfp,"adu = AlnDisplayUnit_no_get(adc,%d)",i);
    expr(dfp,"alu = alc->alu[%d]",i);

    

    /*** start of the labels ***/

    for(j=0;j<a2d->s2d[i]->len;j++) {
      expr(dfp,"%s if(alu->text_label != NULL && strcmp(alu->text_label,\"%s\") == 0) ",j == 0 ? "" : "else",a2d->s2d[i]->l2d[j]->label);
      startbrace_tag(dfp,"if this label");


      /*** add the index if it is there ***/

      for(k=0;k<a2d->s2d[i]->l2d[j]->ind_len;k++) {
	expr(dfp,"aif = get_next_AlnIndexField(adu)");
	expr(dfp,"aif->index_no = %d;",a2d->s2d[i]->l2d[j]->i2d[k]->number);
	expr(dfp,"aif->length = %s;",a2d->s2d[i]->l2d[j]->i2d[k]->eval);
      }


      if(a2d->s2d[i]->l2d[j]->is_lone == TRUE ) {
	expr(dfp,"adc->is_lone = TRUE;");
      }

      expr(dfp,"adu->direction = ALN_DISPLAY_%s;",a2d->s2d[i]->l2d[j]->direction == NULL ? "DOWN" : a2d->s2d[i]->l2d[j]->direction);
      for(k=0;k<a2d->s2d[i]->l2d[j]->len;k++) {
	auto Aln2DisplayField * a2df;
	a2df = a2d->s2d[i]->l2d[j]->a2df[k];
	expr(dfp,"adf = get_next_AlnDisplayField(adu);");


	if( a2df->is_sub == TRUE ) {
	  expr(dfp,"sprintf(tempbuf,\"%%d\",alu->start);");
	  expr(dfp,"push_scan_and_replace_pair(\"%%START\",tempbuf);");
	  expr(dfp,"sprintf(tempbuf,\"%%d\",alu->end);");
	  expr(dfp,"push_scan_and_replace_pair(\"%%END\",tempbuf);");
	}

	if( a2df->is_string == TRUE )
	  expr(dfp,"adf->characters = \"%s\";",a2df->string);
	else if( a2df->is_single == TRUE ) 
	  expr(dfp,"adf->single = %s;",a2df->string);
	else if( a2df->is_sub == TRUE) { 
	  expr(dfp,"strcpy(tempbuf,\"%s\");",a2df->string);
	  expr(dfp,"adf->characters = stringalloc(scan_and_replace_line(tempbuf))");
	  expr(dfp,"pop_scan_and_replace_pair();");
	  expr(dfp,"pop_scan_and_replace_pair();");
	}
	else expr(dfp,"adf->characters = %s",a2df->string);


	if( a2df->is_sub == TRUE ) 
	  expr(dfp,"adf->length = strlen(adf->characters)");
	else expr(dfp,"adf->length = %s",a2df->length == NULL ? "1" : a2df->length);
	expr(dfp,"adf->direction = ALN_DISPLAY_%s",a2df->direction == NULL ? "RIGHT" : a2df->direction);
	expr(dfp,"adf->should_free = %s",a2df->is_static == TRUE ? "FALSE" : "TRUE");
	if( a2df->convert != NULL ) 
	  expr(dfp,"adf->convert_func = %s;",a2df->convert);
      }
      closebrace(dfp);
    }
    expr(dfp,"else ");
    startbrace(dfp);
    expr(dfp,"warn(\"In AlnBlock to AlnDisplay %s, got unintretable label [%%s] for sequence %d\",alc->alu[%d]->text_label);",a2d->name,i,i);
    expr(dfp,"adf = get_next_AlnDisplayField(adu);");
    expr(dfp,"adf->characters = \"?\";");
    expr(dfp,"adf->length = 1");
    expr(dfp,"adf->direction = ALN_DISPLAY_RIGHT");
    expr(dfp,"adf->should_free = FALSE");
    closebrace(dfp);
  }

  closebrace(dfp);

  expr(dfp,"return out;");

  close_function(dfp);
  add_break(dfp);

}
      

 /*************************/
 /* Access/checking func  */
 /*************************/

boolean prepare_Aln2Display(Aln2Display * a2d)
{
  boolean ret = TRUE;

  number_up_Sequence_Index2Display(a2d);

  if( crosslink_Index(a2d) == FALSE ){
    warn("Unable to crosslink Display %s: probably you have not got one of the indexes in the sequence block",a2d->name);
    ret = FALSE;
  }


  return ret;
}



void number_up_Sequence_Index2Display(Aln2Display * a2d)
{
  register int i;
  register int j;

  for(i=0;i<a2d->len;i++) 
    for(j=0;j<a2d->s2d[i]->ind_len;j++) 
      a2d->s2d[i]->i2d[j]->number = j;
}

boolean crosslink_Index(Aln2Display * a2d)
{
  register int i;
  register int j;
  boolean ret = TRUE;

  for(i=0;i<a2d->len;i++)
    for(j=0;j<a2d->s2d[i]->len;j++) {
      if( crosslink_Label2Display_Index(a2d->s2d[i]->l2d[j],a2d->s2d[i]) == FALSE ) 
	ret = FALSE;
    }


  return ret;
}



boolean crosslink_Label2Display_Index(Label2Display * l2d,Sequence2Display * s2d)
{
  register int i;
  Index2Display * temp;
  boolean ret = TRUE;

  for(i=0;i<l2d->ind_len;i++) {
    temp = Index2Display_from_name(s2d,l2d->i2d[i]->name);
    if( temp == NULL ) {
      warn("In Label %s of Sequence number %d, could not crosslink index name %s",l2d->label,s2d->number,l2d->i2d[i]->name);
      ret = FALSE;
    }

    else l2d->i2d[i]->number = temp->number;
  }
  
  return ret;
}

Index2Display * Index2Display_from_name(Sequence2Display * s2d,char * name)
{
  register int i;

  for(i=0;i<s2d->ind_len;i++) {
    if( strcmp(s2d->i2d[i]->name,name) == 0 )
      return s2d->i2d[i];
  }

  return NULL;
}



 /**************************/
 /* I/O functions          */
 /**************************/





Aln2Display         * read_Aln2Display_line(char * line,FILE * ifp)
{
  Sequence2Display * temp;
  Aln2DisplayResource * tempres;
  Aln2Display * out;
  char buffer[MAXLINE];
  char * runner;


  runner = strtok(line,spacestr);
  if( runner == NULL ) {
    warn("In read_Aln2Display_line, got completely blank line!");
    return NULL;
  }

  if( strcmp(runner,"display") != 0 ) {
    warn("In read_Aln2Display_line, got non display line... [%s]",line);
    return NULL;
  }

  runner = strtok(NULL,spacestr);
  if( runner == NULL ) {
    warn("In read_Sequence2Display_line, got no display name... cannot process!");
    return NULL;
  }
  

  out = Aln2Display_alloc_std();
  if( out == NULL)
    return NULL;

  out->name = stringalloc(runner);


  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    if( strwhitestartcmp(buffer,"enddisplay",spacestr) == 0 ) 
      break;
    if( strwhitestartcmp(buffer,"sequence",spacestr) == 0 ) {
      temp = read_Sequence2Display_line(buffer,ifp);
      if( temp == NULL ) 
	warn("In display number %d.. got bad sequence",out->name);
      else add_Aln2Display(out,temp);
    }
    else if ( strwhitestartcmp(buffer,"resource",spacestr) == 0 ) {
      tempres = read_Aln2DisplayResource_line(buffer);
     if( tempres == NULL ) 
	warn("In display %s.. got bad resource",out->name);
      else add_res_Aln2Display(out,tempres);
    }
    else {
      warn("In aln2display read.. got uninterpretable line [%s]",buffer);
    }

  }
  
  return out;
}


Sequence2Display    * read_Sequence2Display_line(char * line,FILE * ifp)
{
  Sequence2Display * out;
  Label2Display * temp;
  Index2Display * ind;
  char buffer[MAXLINE];
  char * runner;


  runner = strtok(line,spacestr);
  if( runner == NULL ) {
    warn("In read_Label2Display_line, got completely blank line!");
    return NULL;
  }

  if( strcmp(runner,"sequence") != 0 ) {
    warn("In read_Sequecne2Display_line, got non sequence line... [%s]",line);
    return NULL;
  }

  runner = strtok(NULL,spacestr);
  if( runner == NULL ) {
    warn("In read_Sequence2Display_line, got no  sequence number... cannot process!");
    return NULL;
  }
  

  out = Sequence2Display_alloc_std();
  if( out == NULL)
    return NULL;

  if( strcmp(runner,"ALLOTHERS") == 0)
    out->number = ALL_OTHER_NUMBER;
  else out->number = atoi(runner);


  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    if( strwhitestartcmp(buffer,"endsequence",spacestr) == 0 ) 
      break;
    else if( strwhitestartcmp(buffer,"name",spacestr) == 0 )
      read_name_line(out,buffer);
    else if( strwhitestartcmp(buffer,"label",spacestr) == 0 ) {
      temp = read_Label2Display_line(buffer,ifp);
      if( temp == NULL ) 
	warn("In sequence number %d.. got bad label",out->number);
      else add_Sequence2Display(out,temp);
    }
    else if ( strwhitestartcmp(buffer,"index",spacestr) == 0 ) {
      ind = read_Index2Display_line(buffer);
      if( ind == NULL ) 
	warn("In sequence number %d, unable to read Index line ",out->number);
      else add_ind_Sequence2Display(out,ind);
    }
      
    else {
      warn("In sequence2display.. got uninterpretable line [%s]",buffer);
    }

  }
  
  return out;
}

Label2Display       * read_Label2Display_line(char * line,FILE * ifp)
{
  Label2Display * out;
  Aln2DisplayField * temp;
  Index2Display * ind;
  char * runner;
  char buffer[MAXLINE];



  runner = strtok(line,spacestr);
  if( runner == NULL ) {
    warn("In read_Label2Display_line, got completely blank line!");
    return NULL;
  }

  if( strcmp(runner,"label") != 0 ) {
    warn("In read_Label2Display_line, got non label line... [%s]",line);
    return NULL;
  }

  runner = strtok(NULL,spacestr);
  if( runner == NULL ) {
    warn("In read_Label2Display_line, got no label name... cannot process!");
    return NULL;
  }

  


  out = Label2Display_alloc_std();

  if( out == NULL)
    return NULL;

  out->label = stringalloc(runner);


  runner = strtok(NULL,spacestr);
  while( runner != NULL ) {
    if( strcmp(runner,"!lone") == 0 ) {
      out->is_lone = TRUE;
    }

    else {
      warn("Could not understand label modifier %s",runner);
    }
    runner = strtok(NULL,spacestr);
  }


  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    if( strwhitestartcmp(buffer,"endlabel",spacestr) == 0)
      break;
    if( strwhitestartcmp(buffer,"field",spacestr) == 0 ) {
      temp = read_Aln2DisplayField_line(buffer,ifp);
      if( temp == NULL ) 
	warn("In label %s, unable to read field lines...",out->label);
      else add_Label2Display(out,temp);
    }
    else if( strwhitestartcmp(buffer,"index",spacestr) == 0 ) {
      ind = read_Index2Display_line(buffer);
      if( ind == NULL ) 
	warn("In label %s, unable to read Index line ",out->label);
      else add_ind_Label2Display(out,ind);
    }

    else if( strwhitestartcmp(buffer,"direction",spacestr) == 0 ) {
      runner = strtok(buffer,spacestr);
      out->direction = string_from_quoted_equality(runner);

    }
    else {
      warn("In reading label [%s], unable to interpret [%s]",out->label,buffer);
    }

  }

  return out;
}
    


Aln2DisplayField    * read_Aln2DisplayField_line(char * line,FILE * ifp)
{
  Aln2DisplayField * out;
  char ** base;
  char ** bkstr;
  char buffer[MAXLINE];

  out = Aln2DisplayField_alloc();
  if( out == NULL)
    return NULL;



  base = bkstr = breakstring(line,spacestr);

  for(bkstr++;*bkstr != NULL;bkstr++) {
    put_away_Aln2DisplayField_strpair(out,*bkstr);
  }
  ckfree(base);

  while( fgets(buffer,MAXLINE,ifp) != NULL ) {
    if( buffer[0] == '#')
      continue;
    if( strwhitestartcmp(buffer,"endfield",spacestr) == 0)
      break;
    base = bkstr = breakstring(buffer,spacestr);
    for(;*bkstr != NULL;bkstr++) {
      put_away_Aln2DisplayField_strpair(out,*bkstr);
    }


    ckfree(base);
  }


  return out;

}

boolean read_name_line(Sequence2Display * s2d,char * name_line)
{
  char ** base;
  char ** bkstr;
 
  if( strwhitestartcmp(name_line,"name",spacestr) != 0 ) {
    warn("Passed a non name line to read name line... [%s]",name_line);
    return FALSE;
  }
  

  base = bkstr = breakstring(name_line,spacestr);

  for(bkstr++;*bkstr != NULL;bkstr++) {
    if( strstartcmp(*bkstr,"string") == 0 ) {
      s2d->name_str = string_from_quoted_equality(*bkstr);
    } 
    else if( strstartcmp(*bkstr,"!static") == 0 ) {
      s2d->is_static = TRUE;
    }
    else if( strstartcmp(*bkstr,"length=") == 0 ) {
      s2d->length = number_from_quoted_equality(*bkstr);
      if( s2d->length < 0 || s2d->length > 512 ) {
	warn("sequence[%d] name length [%d] is ridiculous... setting to 20",s2d->number,s2d->length);
	s2d->length = 20;
      }
    }
    else if( strstartcmp(*bkstr,"direction=") ==0 ) {
      s2d->direction = string_from_quoted_equality(*bkstr);
    }
    else {
      warn("In reading sequence name line for sequence number %d, unable to interpret [%s]",s2d->number,*bkstr);
    }
  }

  if( s2d->direction == NULL )
    s2d->direction = stringalloc("DOWN");

  return TRUE;

}
  
  

boolean put_away_Aln2DisplayField_strpair(Aln2DisplayField * a2df,char * pair)
{
  char buffer[20];

  if( strstartcmp(pair,"string=") == 0) {
    if( a2df->string != NULL) {
      warn("Already a string or eval state ment in this Aln2DisplayField, overriding %s",a2df->string);
      ckfree(a2df->string);
    }
    a2df->string = string_from_quoted_equality(pair);
    a2df->is_string = TRUE;
    sprintf(buffer,"%d",(int)strlen(a2df->string));
    a2df->length = stringalloc(buffer);
    a2df->is_static = TRUE;
  }
  else if( strstartcmp(pair,"eval") == 0 ) {
    if( a2df->string != NULL) {
      warn("Already a string or eval state ment in this Aln2DisplayField, overriding %s",a2df->string);
      ckfree(a2df->string);
    }
    a2df->string = string_from_quoted_equality(pair);
  }
  else if( strstartcmp(pair,"substring") == 0 ) {
    if( a2df->string != NULL) {
      warn("Already a string or eval state ment in this Aln2DisplayField, overriding %s",a2df->string);
      ckfree(a2df->string);
    }
    a2df->string = string_from_quoted_equality(pair);
    a2df->is_sub    = TRUE;
    a2df->is_static = FALSE;
  }

  else if( strstartcmp(pair,"length=") == 0 ) {
    a2df->length = string_from_quoted_equality(pair);
  }
  else if( strstartcmp(pair,"direction=") == 0) {
    a2df->direction = string_from_quoted_equality(pair);
  }
  else if( strstartcmp(pair,"convert=") == 0 ) {
    a2df->convert = string_from_quoted_equality(pair);
  }
  else if( strstartcmp(pair,"!static") == 0) {
    a2df->is_static = TRUE;
  }
  else if( strstartcmp(pair,"!single") == 0) {
    a2df->is_single = TRUE;
  }
  else {
    warn("Unable to interpret [%s] as a valid Aln2DisplayField tag",pair);
    return FALSE;
  }
  
  return TRUE;
}

Aln2DisplayResource * read_Aln2DisplayResource_line(char * line)
{
  Aln2DisplayResource * out;
  char ** base;
  char ** bkstr;

  out = Aln2DisplayResource_alloc();
  if( out == NULL)
    return NULL;


  base = bkstr = breakstring(line,spacestr);


  for(bkstr++;*bkstr != NULL;bkstr++) {

    if( strstartcmp(*bkstr,"type=") == 0) {
     
      out->type = string_from_quoted_equality(*bkstr);
    }
    else if( strstartcmp(*bkstr,"name=") == 0 ) {
      out->name = string_from_quoted_equality(*bkstr);
    }
    else if( strstartcmp(*bkstr,"arg=") == 0) {
      out->arg = string_from_quoted_equality(*bkstr);
    }
    else {
      warn("Got strange tag [%s] in resource line..., while reading display... ignoring",*bkstr);
    }
  }
  ckfree(base);


  return out;
}

 


Index2Display * read_Index2Display_line(char * line)
{
  Index2Display * out;
  char ** bkstr;
  char ** base;

  if( strwhitestartcmp(line,"index",spacestr) != 0 ) {
    warn("Tried to read an Index2Display line with no index! Bad news!");
    return NULL;
  }

  
  base = bkstr = breakstring(line,spacestr);

  out = Index2Display_alloc();
  if( out == NULL )
    return NULL;

  bkstr++;
  
  out->name = stringalloc(*bkstr);

  for(bkstr++;*bkstr != NULL;bkstr++) {
    if( strstartcmp(*bkstr,"start") == 0 ) {
      if( out->eval != NULL ) {
	warn("you are replacing an index evaluation. Remember that each index can only have one length [or start if in sequence]");
	ckfree(out->eval);
      }
      out->eval = string_from_quoted_equality(*bkstr);
      out->is_start = TRUE;
    }

    else if( strstartcmp(*bkstr,"length") == 0 ) {
      if( out->eval != NULL ) {
	warn("you are replacing an index evaluation. Remember that each index can only have one length [or start if in sequence]");
	ckfree(out->eval);
      }
      out->eval = string_from_quoted_equality(*bkstr);
    }
    else {
      warn("Found an uninterpretable tag [%s] in index %s",out->name,*bkstr);
    }

  }

  ckfree(base);

  return out;
}




void show_Aln2Display(Aln2Display * a2d,FILE * ofp)
{
  register int i;
  
  fprintf(ofp,"Display %s\n",a2d->name);
  for(i=0;i<a2d->res_len;i++)
    show_Aln2DisplayResource(a2d->a2dr[i],ofp);
  for(i=0;i<a2d->len;i++)
    show_Sequence2Display(a2d->s2d[i],ofp);
}

void show_Aln2DisplayResource(Aln2DisplayResource * a2dr,FILE * ofp)
{
  fprintf(ofp,"Resource [%s] Type [%s] Argument [%s]\n",a2dr->type,a2dr->name,a2dr->arg);
}

void show_Sequence2Display(Sequence2Display * s2d,FILE * ofp)
{
  register int i;
  fprintf(ofp,"Sequence %d\n",s2d->number);
  for(i=0;i<s2d->len;i++)
    show_Label2Display(s2d->l2d[i],ofp);
}

void show_Label2Display(Label2Display * l2d,FILE * ofp)
{
  register int i;
  fprintf(ofp,"\tLabel %s\n",l2d->label);
  for(i=0;i<l2d->len;i++) {
    fprintf(ofp,"\t  Field %d",i);
    show_Aln2DisplayField(l2d->a2df[i],ofp);
  }
}

void show_Aln2DisplayField(Aln2DisplayField * a2df,FILE * ofp)
{
  fprintf(ofp," String = [%s], Length [%s], Direction [%s]\n",a2df->string,a2df->length,a2df->direction);
}


%}







