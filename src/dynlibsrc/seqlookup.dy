

%{

#include "sequence.h"
#include "sequencedb.h"

#define SEQLOOKUP_5AA_SIZE (26*26*26*26*26)

#define SEQLOOKUP_LOWCOMPLEXITY 1

#define ARRAYHEAD_IS_LOWCOMPLEXITY(head) (head->flags & SEQLOOKUP_LOWCOMPLEXITY)

typedef struct SeqLookupResultStruct {
  Sequence * seq;
  int pos;
} SeqLookupResultStruct;


typedef struct Wise2_ArraySeqLookup_Unit {
  Sequence * seq;
  int pos;
} ArraySeqLookupUnit;


typedef struct Wise2_ArraySeqHead {
  ArraySeqLookupUnit * units;
  int current_pos;
  int max;
  char flags;
} ArraySeqHead;

typedef enum SeqLookupLoadType {
  SeqLookupLoad_Protein = 12,
  SeqLookupLoad_DNA
} SeqLookupLoadType;

#define SeqLookupInterfaceLISTLENGTH 4028

%}


struct SeqLookupResultInterface 
SeqLookupResultStruct * (*next)(void * data,SeqLookupResultStruct * prev) !func
boolean (*is_more)(void *data) !func
void (*free_data)(void * data) !func
void * data !link
%info
This is the final interface returned on
finding an occuypied index (see below about 
how to get this). It basically represents
an array of SeqLookupResultStruct. The
interface can choose how to manage the
memory - a client should call is_more function.
If this function returns TRUE, then it can call
next with the previous resultstruct passed in
in the prev slot. For the first call it passes
in a NULL pointer. The interface can decide whether
to reuse the memory or not. Finally the client
calls free_data to indicate that it does not want to
use the information any more
%%

struct SeqLookupClientInterface
SeqLookupResultInterface * (*lookup)(void * data,int seq_number) !func
boolean (*is_populated)(void * data,int seq_number) !func
void (*free_data)(void * data) !func
void * data !link
%info
This is a per-client interface got from the central SeqLookup
interface. A client must guarentee that only a single thread
will interact with a single SeqLookupClientInterface so
interfaces have a chance to sensible manage their memory
%%


struct SeqLookupLoadPara
SeqLookupLoadType type !def="SeqLookupLoad_Protein"
int tile_freq !def="1"
int report_stagger !def="0"
int truncate !def="0"
int mark_low_complexity !def="1"
int start_seq_load !def="-1"
int end_seq_load   !def="-1"


struct SeqLookupInterface
SeqLookupClientInterface * (*get_client)(void * data) !func
boolean (*add_seq)(void * data,Sequence * seq,SeqLookupLoadPara * para) !func
ArraySeqHead * (*lookup_array_head)(void * data,int seq_number) !func
boolean (*add_direct_number)(void *data,int seq_number,Sequence * target,int pos) !func
void (*free_data)(void * data) !func
void * data !link
Sequence ** seq_store !list
%info
This interface defines the basic SeqLookup
possibilities. Its main role is to give out
clientInterfaces, which must be one per thread
(in contrast a client can call get_client by
multiple threads, though it should do each call via
single threaded). 
%%

%{
#include "seqlookup.h"


%func
Frees SeqLookupInterface - overrides dynamite default
%%
!deconstructor
SeqLookupInterface * free_SeqLookupInterface(SeqLookupInterface * sli)
{
  int i;

  if( sli == NULL ) {
    return NULL;
  }

  for(i=0;i<sli->len;i++) {
    free_Sequence(sli->seq_store[i]);
  }

  (*sli->free_data)(sli->data);
  ckfree(sli);

  return NULL;

}


%func
Loads a SequenceDB into a hash on the basis of the SeqLookupLoadPara

returns the number of sequences loaded
%%
int load_SequenceDB_SeqLookupLoadPara(SeqLookupLoadPara * p,SequenceDB * db,SeqLookupInterface * sli)
{
  int ret;
  int c;
  int i;
  Sequence * seq;
  int base[5];
  int start_base;
  int char_count = 0;


  for(i=0,start_base=1;i<5;i++) {
    base[i] = start_base;
    start_base = start_base * 26;
  }


  for(c=0,seq = init_SequenceDB(db,&ret); seq != NULL;seq = get_next_SequenceDB(db) ) {
    /* don't have to hardlink and then also free - just store here */
    c++;

    if( p->start_seq_load >= 0 && c-1 < p->start_seq_load ) {
      continue;
    }
    if( p->end_seq_load >= 0 && c-1 >= p->end_seq_load ) {
      break;
    }


    add_SeqLookupInterface(sli,seq);


    if( p->report_stagger >= 1 && c % p->report_stagger == 0 ) {
      info("Loaded %d sequences (%d characters, %.2f)... at %s\n",c,char_count,(double)char_count/(double)p->report_stagger,seq->name);
      char_count = 0;
    }

    char_count += seq->len;

    (*sli->add_seq)(sli->data,seq,p);

   
    if( p->truncate != 0 && c == p->truncate ) {
      info("Asked to truncate load after %d sequences\n",p->truncate);
      break;
    }
  }
    

  return c;

}




%func
Shows help associated with Sequence loading
%%
void show_help_SeqLookupLoadPara(FILE * ofp)
{
  fprintf(ofp,"Sequence Index Loading parameters\n");
  fprintf(ofp,"   -seqloadtile             tiling skip of load (default 1)\n");
  fprintf(ofp,"   -seqloadreport <number>  report (using info) at what stagger rating (default none)\n");
  fprintf(ofp,"   -seqloadtrunc  <number>  truncate load after this number of sequeneces (useful for debugging)\n");
  fprintf(ofp,"   -seqloadstart  <number>  start position in database for seq load\n");
  fprintf(ofp,"   -seqloadend    <number>  end position in database for seq load\n");
  fprintf(ofp,"   -[no]seqloadlow          mark low complexity words for use with low complexity numbing\n");
 
  return;
}

%func
Builds new SeqLookup load from a command line
%%
SeqLookupLoadPara * new_SeqLookupLoadPara_from_argv(int * argc,char ** argv)
{
  SeqLookupLoadPara * out;

  out = SeqLookupLoadPara_alloc();

  out->mark_low_complexity = 1;
  out->start_seq_load = -1;
  out->end_seq_load   = -1;

  strip_out_integer_argument(argc,argv,"seqloadtile",&out->tile_freq);

  strip_out_integer_argument(argc,argv,"seqloadreport",&out->report_stagger);

  strip_out_integer_argument(argc,argv,"seqloadtrunc",&out->truncate);

  strip_out_integer_argument(argc,argv,"seqloadstart",&out->start_seq_load);
  
  strip_out_integer_argument(argc,argv,"seqloadend",&out->end_seq_load);

  strip_out_boolean_def_argument(argc,argv,"seqloadlow",&out->mark_low_complexity);

  return out;
}



%func
Function for DNA sequence to number on 15mers,
Ns get mapped to -1
%%
int seq_number_dna_15mer_noN(char * seq)
{
  int i;
  int ret = 0;
  int base = 1;
  int no = 0;

  for(i=0;i<15;i++) {
    no = base_from_char(seq[i]);
    if( no == BASE_N ) {
      return -1;
    }
    
    ret += base * no;
    base = base * 4;
  }

  return ret;
    

}

%func
Function for DNA sequence to number on 15mers,
Ns get mapped to -1
%%
int seq_number_dna_7mer_noN(char * seq)
{
  int i;
  int ret = 0;
  int base = 1;
  int no = 0;

  for(i=0;i<7;i++) {
    no = base_from_char(seq[i]);
    if( no == BASE_N ) {
      return -1;
    }
    
    ret += base * no;
    base = base * 4;
  }

  return ret;
    
}


%func
Function for the amino acid to number on 5mers
%%
int seq_number_aa_5mer(char * seq)
{
  int i;
  int ret = 0;
  int base = 1;
  int no = 0;

  for(i=0;i<5;i++) {
    no = toupper(seq[i])-'A';
    if( no > 26 || no < 0 ) {
      no = 'X'-'A';
    }
    ret += base * no;
    base = base * 26;
  }

  return ret;
}

%func
returns simple lowcomplexity flag or 
not for this sequence
%%
char flags_from_5aa_sequence(char * seq)
{
  int count =  0;
  
  if( seq[0] != seq[1] ) {
    count++;
  } 
  if( seq[1] != seq[2] ) {
    count++;
  } 
  if( seq[2] != seq[3] ) {
    count++;
  } 
  if( seq[3] != seq[4] ) {
    count++;
  } 
  if( seq[4] != seq[0] ) {
    count++;
  }

  if( count < 3 ) {
    return SEQLOOKUP_LOWCOMPLEXITY;
  } else {
    return 0;
  }

}

%func
Frees SeqLookupClientInterface - overrides dynamite default
%%
!deconstructor
SeqLookupClientInterface * free_SeqLookupClientInterface(SeqLookupClientInterface * sli)
{
  if( sli == NULL ) {
    return NULL;
  }

  (*sli->free_data)(sli->data);
  ckfree(sli);

  return NULL;

}

%func
Frees SeqLookupResultInterface - overrides dynamite default
%%
!deconstructor
SeqLookupResultInterface * free_SeqLookupResultInterface(SeqLookupResultInterface * sli)
{
  if( sli == NULL ) {
    return NULL;
  }

/*  fprintf(stderr,"Freeing results interface\n"); */
  (*sli->free_data)(sli->data);


  return NULL;

}





%}
