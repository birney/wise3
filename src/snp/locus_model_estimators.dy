
%{
#include "frequency_count.h"

#define ModelProbabilitySetLISTLENGTH 500

typedef enum LocusModelType {
	LocusModel_Normal_One,
	LocusModel_Normal_Multi,
	LocusModel_SingleHomozygous_First_Selection,
	LocusModel_SingleHomozygous_Second_Selection,
	LocusModel_Hetrozygous_Selection,
	LocusModel_Hemi
} LocusModelType;

#define MAX_POP 6


%}


struct ModelProbabilityPoint
double estimate_selection_hemi
double estimate_first_freq[MAX_POP]
Score  likelihood_score


struct ModelProbabilitySet
LocusGenotypeCount * data !link
LocusModelType type
boolean keep !def="0"
ModelProbabilityPoint ** mpp !list
ModelProbabilityPoint * best 
double total_likelihood




%{
#include "locus_model_estimators.h"


ModelProbabilitySet * estimate_model_ModelProbabilitySet(LocusGenotypeCount * lgc,double sweep,int points,LocusModelType type,double sel_sweep,int sweep_points)
{
  int i;
  int pop = lgc->len-1;
  int pop_point[MAX_POP];
  double central[MAX_POP];
  double incr;
  ModelProbabilityPoint mpp;
  ModelProbabilityPoint submpp;
  
  int overflow;
  ModelProbabilitySet * mps;

  double sweep_incr;
  int ii;
  int k;

  mps = ModelProbabilitySet_alloc_std();
  mps->keep = 0;
  mps->best = ModelProbabilityPoint_alloc();
  mps->best->likelihood_score = NEGI;

  assert(lgc != NULL);
  assert(lgc->len > 0);
  assert(sweep > 0 && sweep < 1.0);
  assert(points > 2);


  /*  fprintf(stderr,"Looking at locus %s with length %d\n",lgc->bl->locus_id,lgc->len);*/

  for(i=0;i<lgc->len;i++) {
    pop_point[i] = 0;
    central[i] = central_first_frequency_PopulationGenotypeCount(lgc->pgc[i]);
  }

  incr = sweep*2 / points;
  sweep_incr = sel_sweep*2 / sweep_points;

  while( 1 ) {
    /* we test this position first */


    overflow = 0;

    for(i=0;i<lgc->len;i++) {
      mpp.estimate_first_freq[i] = 
	central[i] - sweep + (pop_point[i]*incr);
      if( mpp.estimate_first_freq[i] > 1.0 || mpp.estimate_first_freq[i] < 0.0 ) {
	overflow = 1;
      }
    }

    if( overflow == 0 ) {

      if( type == LocusModel_Normal_Multi ) {
	estimate_normal_multi(lgc,&mpp);
	add_and_update_ModelProbabilitySet(mps,&mpp);
      } else {
	for(k=0;k < sweep_points;k++) {

	  for(ii=0;ii<lgc->len;ii++) {
	    submpp.estimate_first_freq[ii] = mpp.estimate_first_freq[ii];
	  }
	  submpp.estimate_selection_hemi = 0.0 - sel_sweep + (sweep_incr*k);
	  
	  switch( type ) {
	  case LocusModel_SingleHomozygous_First_Selection :
	    estimate_homozygous_first_selection_multi(lgc,&submpp,0);
	    break;
	  case LocusModel_SingleHomozygous_Second_Selection :
	    estimate_homozygous_second_selection_multi(lgc,&submpp);
	    break;
	  case LocusModel_Hetrozygous_Selection :
	    estimate_hetreozygous_selection_multi(lgc,&submpp);
	    break;
	  default :
	    fatal("No model for type %d yet",type);
	    break;
	  }

	  add_and_update_ModelProbabilitySet(mps,&submpp);

	} /* end of for (k) selection sweep */


      } /* end of else is a selection type */
    } else {
      /* overflow */

    }


    /* we end when all populations hit position */
    for(i=0;i<lgc->len;i++) {
      if( pop_point[i] != points ) 
	break;
    }

    if( i >= lgc->len ) {
      break;
    }

    /* if we have reached here - we need to update positions 
     * start at the end add one; if it is at position, update
     * next to the left and set to zero - recurse to the end
     */

    for(i=lgc->len-1;i >= 0;i--) {
      if( pop_point[i] != points ) {
	pop_point[i]++;
	break;
      } else {
	pop_point[i] = 0;
	/* return to for loop */
      }

    }
    
  }

  return mps;
       
}

void estimate_normal_multi(LocusGenotypeCount * lgc,ModelProbabilityPoint * mpp)
{
  int i;
  Score sc= 0;

  assert(lgc != NULL);
  assert(mpp != NULL);


  for(i=0;i < lgc->len;i++) {

    sc += 
      (2*Probability2Score(mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousFirst] +
      (2*Probability2Score(1.0-mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousSecond] +
      (Probability2Score(2*mpp->estimate_first_freq[i]*(1.0-mpp->estimate_first_freq[i])))*lgc->pgc[i]->count[BiGenotypeHetrozygous];
  }
  
  /*  fprintf(stderr,"For model with %f and %f, got %d\n",mpp->estimate_first_freq[0],mpp->estimate_first_freq[1],sc);*/


  mpp->likelihood_score = sc;

  return;

}


void estimate_homozygous_first_selection_multi(LocusGenotypeCount * lgc,ModelProbabilityPoint * mpp,int show)
{
  int i;
  Score sc= 0;
  double sel_prob;
  double rem_prob;

  Score first;
  Score het;
  Score second;

  Score first_p;
  Score second_p;
  Score het_p;

  assert(lgc != NULL);
  assert(mpp != NULL);


  sel_prob = 1.0-mpp->estimate_selection_hemi;
  rem_prob = 1.0+mpp->estimate_selection_hemi;

  for(i=0;i < lgc->len;i++) {

    first = ((Probability2Score(sel_prob)+2*Probability2Score(mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousFirst]);

    second = (Probability2Score(rem_prob)+2*Probability2Score(1.0-mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousSecond];
    
    het =       (Probability2Score(rem_prob)+Probability2Score(2*mpp->estimate_first_freq[i]*(1.0-mpp->estimate_first_freq[i])))*lgc->pgc[i]->count[BiGenotypeHetrozygous];

    first_p = ((Probability2Score(rem_prob)+2*Probability2Score(mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousFirst]);

    second_p = (Probability2Score(sel_prob)+2*Probability2Score(1.0-mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousSecond];
    
    het_p =       (Probability2Score(rem_prob)+Probability2Score(2*mpp->estimate_first_freq[i]*(1.0-mpp->estimate_first_freq[i])))*lgc->pgc[i]->count[BiGenotypeHetrozygous];

    if( show) {
      fprintf(stderr,"In pop %d\t%d %d,\t%d %d,\t%d %d\n",
	      i,
	      first,lgc->pgc[i]->count[BiGenotypeHomozygousFirst],
	      het,lgc->pgc[i]->count[BiGenotypeHetrozygous],
	      second,lgc->pgc[i]->count[BiGenotypeHomozygousSecond]);
      fprintf(stderr,"Prime  %d\t%d %d,\t%d %d,\t%d %d\n",
	      i,
	      first_p,lgc->pgc[i]->count[BiGenotypeHomozygousFirst],
	      het_p,lgc->pgc[i]->count[BiGenotypeHetrozygous],
	      second_p,lgc->pgc[i]->count[BiGenotypeHomozygousSecond]);
      
    }

    sc += first + second + het;
     
  }
  
  /*  fprintf(stderr,"For model with %f and %f, sel, %f got %d\n",mpp->estimate_first_freq[0],mpp->estimate_first_freq[1],sel_prob,sc);*/


  mpp->likelihood_score = sc;

  return;

}


void estimate_hetreozygous_selection_multi(LocusGenotypeCount * lgc,ModelProbabilityPoint * mpp)
{
  int i;
  Score sc= 0;
  double sel_prob;
  double rem_prob;

  Score first;
  Score het;
  Score second;

  assert(lgc != NULL);
  assert(mpp != NULL);


  sel_prob = 1.0-mpp->estimate_selection_hemi;
  rem_prob = 1.0+mpp->estimate_selection_hemi;

  for(i=0;i < lgc->len;i++) {

    first = ((Probability2Score(rem_prob)+2*Probability2Score(mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousFirst]);

    second = (Probability2Score(rem_prob)+2*Probability2Score(1.0-mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousSecond];
    
    het =       (Probability2Score(sel_prob)+Probability2Score(2*mpp->estimate_first_freq[i]*(1.0-mpp->estimate_first_freq[i])))*lgc->pgc[i]->count[BiGenotypeHetrozygous];

    sc += first + second + het;
     
  }
  


  mpp->likelihood_score = sc;

  return;

}


void estimate_homozygous_second_selection_multi(LocusGenotypeCount * lgc,ModelProbabilityPoint * mpp)
{
  int i;
  Score sc= 0;
  double sel_prob;
  double rem_prob;

  Score first;
  Score second;
  Score het;

  assert(lgc != NULL);
  assert(mpp != NULL);


  sel_prob = 1.0-mpp->estimate_selection_hemi;
  rem_prob = 1.0+mpp->estimate_selection_hemi;

  for(i=0;i < lgc->len;i++) {

    first = ((Probability2Score(rem_prob)+2*Probability2Score(mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousFirst]);

    second = (Probability2Score(sel_prob)+2*Probability2Score(1.0-mpp->estimate_first_freq[i]))*lgc->pgc[i]->count[BiGenotypeHomozygousSecond];
    
    het =       (Probability2Score(rem_prob)+Probability2Score(2*mpp->estimate_first_freq[i]*(1.0-mpp->estimate_first_freq[i])))*lgc->pgc[i]->count[BiGenotypeHetrozygous];

    sc += first + second + het;

  }
  
  /*  fprintf(stderr,"For model with %f and %f, got %d\n",mpp->estimate_first_freq[0],mpp->estimate_first_freq[1],sc);*/


  mpp->likelihood_score = sc;

  return;

}


void add_and_update_ModelProbabilitySet(ModelProbabilitySet * out,ModelProbabilityPoint * mpp)
{
  int i;

  if( out->best->likelihood_score < mpp->likelihood_score ) {
    out->best->estimate_selection_hemi = mpp->estimate_selection_hemi;
    out->best->likelihood_score = mpp->likelihood_score;
    for(i=0;i<MAX_POP;i++) {
      out->best->estimate_first_freq[i] = mpp->estimate_first_freq[i]; 
    }

  }


}



ModelProbabilitySet * estimate_normal_set(LocusGenotypeCount * lgc,double sweep, double points)
{
  int i;
  int first_total = 0;
  int defined_total = 0;

  double central;
  double incr;

  ModelProbabilitySet * mps;
  ModelProbabilityPoint * mpp;

  mps = ModelProbabilitySet_alloc_std();

  for(i=0;i<lgc->len;i++) {
    first_total   += (lgc->pgc[i]->count[BiGenotypeHomozygousFirst]*2 + lgc->pgc[i]->count[BiGenotypeHetrozygous]);
    defined_total += lgc->pgc[i]->defined_total*2;
  }

  central = (double) first_total / (double) defined_total;




  incr = sweep/points;

  mps->best = NULL;
  for(i=0;i<points;i++) {
    mpp = estimate_normal(lgc,central-sweep+(incr*i));
    fprintf(stderr,"Estimate for %f is %f\n",(central-sweep+(incr*i)),Score2Bits(mpp->likelihood_score));

    add_ModelProbabilitySet(mps,mpp);
    if( mps->best == NULL || mps->best->likelihood_score < mpp->likelihood_score ) {
      mps->best = mpp;
    }
  }

  for(i=0;i<points;i++) {
    mpp = estimate_normal(lgc,central+sweep-(incr*i));
    add_ModelProbabilitySet(mps,mpp);
    if( mps->best == NULL ||  mps->best->likelihood_score < mpp->likelihood_score ) {
      mps->best = mpp;
    }
  }

  return mps;

}

ModelProbabilityPoint * estimate_normal(LocusGenotypeCount * lgc,double estimate_first_freq)
{
  int i;
  Score sub_likelihood;

  ModelProbabilityPoint * mpp;

  mpp = ModelProbabilityPoint_alloc();

  mpp->estimate_selection_hemi = 0.0;
  mpp->estimate_first_freq[0] = estimate_first_freq;

  /* likelihood is
   * Prob(Data|Model)
   */
     
  sub_likelihood = 0;
  for(i=0;i<lgc->len;i++) {

    sub_likelihood += 
      (2*Probability2Score(estimate_first_freq))*lgc->pgc[i]->count[BiGenotypeHomozygousFirst] +
      
      (2*Probability2Score(1.0-estimate_first_freq))*lgc->pgc[i]->count[BiGenotypeHomozygousSecond] +
      (Probability2Score(estimate_first_freq*(1.0-estimate_first_freq))*lgc->pgc[i]->count[BiGenotypeHetrozygous]);
  }

  mpp->likelihood_score = sub_likelihood;

  return mpp;
}


%}
